AdventureOS
============

*********************************************************************
This file contains the documentation of a package of the AdventureOS
It is written using asciidoc markup and can be compiled with the command:

  asciidoc Package.docu
*********************************************************************


=== Package util

Util contains helpful JavaScript code snippets.

=== Class aos.Game

The Game module contains the main Game object. A Game object is pretty much only a primitive service registry
(that is, a hash map). A single game object plays the function of a "global" object for a game instance. Other services should get a reference to the game and can start from there to discover other services.

Protocol between game and a service (all optional):
  - hasBeenAddedToGameWithName(game, name)
  - willBeRemovedFromGame()
  - hasBeenRemovedFromGame()

=== Class aos.TimeService

The time service is a service that is supposed to be registered in the game object. The time service implements a (as of yet primitive) run loop that can be started, paused, resumed, and stopped. You can register tick receivers, which are simple functions that get the passed time since the last tick as their only parameter.

*********************************************************************
In future iterations we probably want to make the run loop a little smarter by taking the "target interval" only as a hint. When the last tick took longer, the actual interval for the next tick could be reduced a little to get to the desired frame rate. Not sure if JavaScript's setInterval does something like that already, but I am pretty sure it doesn't
*********************************************************************

=== Class aos.CallbackDispatcherService

The timed callback dispatcher allows you to register callbacks that are executed later. It implements a dispatch() function that can be used as a tick receiver of the time service. You can register callbacks either by round (e.g., "call in 3 ticks from now") or by time (e.g., "call in 200 ms")